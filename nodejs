1，是一个javascript runtime
2，非阻塞I/O
3，CPU密集：压缩，解压，加密，解密
	 I/O密集：文件操作，网络操作，数据库
4，高并发：同一时间要做的事情(类比饭口厨师)
					 解决方法：增加机器个数，提高单个质量
5，进程：白话来讲就是浏览数据的一次活动，是系统进行资源分配和调度					 的基本单位
	 线程：进程内一个相对独立的可调度的执行单元，
6，多进程：启动多个进程，多个进程间可以一起执行多个任务(										 快速切换任务)
7，NodeJS的工作流程可以简单的类比为餐厅，顾客/服务员/厨师模式
8，全局对象：global

commomjs规定：
{
	每个文件是一个模块，有自己的作用域
	在模块内部，module变量代表模块本身
	module.exports属性代表模块对外接口
}

require规则：
{
	/绝对路径，./相对路径
	支持js,json,node扩展名
	不写路径认为是build-in模块或者各级node_modules内的第三反模块
}

require特性：
{
	module被加载的时候执行，加载后缓存
	一旦出现某个模块被循环加载，就只输出已经执行的部分，还未执行的部分不会输出
}

npm install chalk：node包管理工具
{
	//让字体变红等各种特性，具体可以查看api
	const chalk = require('chalk');
	console.log(chalk.red('this is red'));
}

如何理解exports和module.exports
{
	exports相当于：const exports = module.exports
	exports可以追加值，将它看为一个普通对象，引用类型不能更改值，想要更改值用module.exports
}

全局变量Global:CommonJS;Buffer;process;console;timer
global.testVar = 200;//会将testVar变成全局变量
{
	setImmediate(() => {});//异步执行，可以简单理解为setTimeout/setInterval时间参数传零
}

process:{
	const {argv, argv0, execArgv, execPath} = process;
	//控制台打印时可以根据需求增加其他参数，默认输出第一条为node安装地址，第二条为该文件所在地址
	argv.forEach(item => {
		console.log(item)
	})
	//argv0就是argv第零个参数
	//execArgv可以在node该文件前输入值并返回成一个数组输出
	//execPath就是argv第一个参数

	const {env} = process;
	//里面的一些配置参数，如path(哪些可以不写路径)

	process.cwd()
	//将当前的路径打印出来，相当于Linux的pwd命令

	process.nextTick(() => {});
	//异步执行，可以类比global中的setImmediate,区别：process.nextTick比setImmediate先执行
	//执行顺序process.nextTick(),setTimeout,setImmediate
	//队列理解方式process.nextTick()相当于放在当前队列的队尾，而setImmediate相当于放在下一个队列的队首
}

debug:{
	Inspector : node --inspect-brk 文件名  (brk让程序在执行时就停住)
	VS Code
}

内置api:
1,path:{
	path.normalize()：path.normalize() 方法会规范化给定的 path，并解析 '..' 和 '.' 片段。比如前台传来的路径和想要的格式有略微差别，不需要手动处理直接调用就可以了
	path.join()：将路径进行拼接，如果路径不规范会自动调用normalize进行规范化
	path.resolve()：看绝对路径，比如看当前路径的绝对路径path.resolve('./')
	path.basename()：返回path的最后一部分
	path.dirname()：返回path的目录名
	path.extname()：返回path的扩展名
	path.parse()和path.format()：parse可以把path的路径解析成root,dir,base,ext,name模式，而format用于还原成路径，用处举例，用parse拆解后改了某一部分的值，在用format拼接回来
	//注：如果提供了dir,root会被忽略;如果提供了base,ext和name会被忽略。
	path.sep,path.delimiter:路径分隔符
	path.win32和path.posix
	_dirname,_filrname总是返回文件的绝对路径；process.cwd()总是返回执行node命令所在的文件夹
	./在require方法中总是相对当前文件所在文件夹，其他地方和process.cwd()一样，相对node启动文件夹
}

2,Buffer:全局变量{
	Buffer用于处理二进制数据流
	实例类似整数数组，大小固定
	C++代码在V8堆外分配物理内存

	0x:表示16进制

	Buffer.alloc(size,fill)
	//size:指定Buffer初始化长度;fill:填充元素
	Buffer.from(类型,编码)
	//通过数组/字符串形式创建一个新的Buffer，可以指定编码规则，默认UTF-8

	Buffer.byteLength():看一个字符串占了多少个字节
	//一个中文占3个字节
	Buffer.isBuffer():看一个对象是否是Buffer对象
	Buffer.concat(array):拼接Buffer

	buf.length:返回buf在字节数上分配的内存量。注意,这并不一定反映buf内可用的数据量
	//虽然length属性不是不可变的，但改变length的值可能会导致不确定、不一致的行为。那些希望修改一个Buffer的长度的应用程序应当将length视为只读的，且使用buf.slice()创建一个新的Buffer。
	buf.toString('编码'):默认UTF-8
	buf.fill():对Buffer进行填充，参数与es6 fill一致
	buf.equals()
	buf.indexOf()

	因为一个中文是三个字节，假如按照五个拆分，会出现乱码：
	{
		const StringDecoder = require('string_decoder').StringDecoder;
		const decoder = new StringDecoder('utf8')
	}
}

3,events:require(events){
	{
		const EventEmitter = require('events');
		class CustomEvent extends EventEmitter {};
		const ce = new CustomEvent();
		ce.on('error', err => {
			console.log(err);
		});
		ce.emit('error', new Error('oops!'));
	}

	emitter.once:添加一个单次的listener函数

	emitter.removeListener('想移除哪个事件的',想移除谁)
	emitter.removeAllListener('事件名')
}

4,fs:require('fs'){
	fs.readFile('./main.js', 'utf8', (err, data) => {})
	fs.readFileSync('./main.js', 'utf8')//同步
	
}
