1，是一个javascript runtime
2，非阻塞I/O
3，CPU密集：压缩，解压，加密，解密
	 I/O密集：文件操作，网络操作，数据库
4，高并发：同一时间要做的事情(类比饭口厨师)
					 解决方法：增加机器个数，提高单个质量
5，进程：白话来讲就是浏览数据的一次活动，是系统进行资源分配和调度					 的基本单位
	 线程：进程内一个相对独立的可调度的执行单元，
6，多进程：启动多个进程，多个进程间可以一起执行多个任务(										 快速切换任务)
7，NodeJS的工作流程可以简单的类比为餐厅，顾客/服务员/厨师模式
8，全局对象：global

commomjs规定：
{
	每个文件是一个模块，有自己的作用域
	在模块内部，module变量代表模块本身
	module.exports属性代表模块对外接口
}

require规则：
{
	/绝对路径，./相对路径
	支持js,json,node扩展名
	不写路径认为是build-in模块或者各级node_modules内的第三反模块
}

require特性：
{
	module被加载的时候执行，加载后缓存
	一旦出现某个模块被循环加载，就只输出已经执行的部分，还未执行的部分不会输出
}

npm install chalk：node包管理工具
{
	//让字体变红等各种特性，具体可以查看api
	const chalk = require('chalk');
	console.log(chalk.red('this is red'));
}

如何理解exports和module.exports
{
	exports相当于：const exports = module.exports
	exports可以追加值，将它看为一个普通对象，引用类型不能更改值，想要更改值用module.exports
}
